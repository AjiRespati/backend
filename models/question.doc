I have js sequelize models. stock, stockBatch, and salesmanCommission.
I want to get the stockBatch, filtered by dateRange and salesId, that includes the related stocks and salesmanCommission


```
module.exports = (sequelize, DataTypes) => {
    const StockBatch = sequelize.define("StockBatch", {
        id: {
            type: DataTypes.UUID,
            defaultValue: DataTypes.UUIDV4,
            primaryKey: true,
        },
        batchType: { // e.g., 'stock_creation', 'settlement'
            type: DataTypes.STRING,
            allowNull: false,
        },
        status: { // Tracks the status of the batch processing itself
            type: DataTypes.ENUM('processing', 'completed', 'failed', 'settled', 'canceled'),
            allowNull: false,
            defaultValue: 'processing',
        },
        itemCount: { // Expected number of items
            type: DataTypes.INTEGER,
            allowNull: false,
        },
        successCount: { // Actual successful items (relevant for non-atomic or settlement)
            type: DataTypes.INTEGER,
            allowNull: true,
        },
        failureCount: { // Actual failed items (relevant for non-atomic or settlement)
            type: DataTypes.INTEGER,
            allowNull: true,
        },
        createdBy: { // User who initiated the batch
            type: DataTypes.STRING,
            allowNull: false,
        },
        creatorId: { // User who initiated the batch
            type: DataTypes.STRING,
            allowNull: false,
        },
        // --- Optional: Add canceledBy field ---
        canceledBy: {
            type: DataTypes.STRING,
            allowNull: true,
        },
        userDesc: { // User who initiated the batch
            type: DataTypes.STRING,
            allowNull: false,
        },
        errorMessage: { // Store details if the batch failed
            type: DataTypes.TEXT,
            allowNull: true,
        },
        // Add other potential batch-level info if needed, e.g., target shop
        // shopId: {
        //   type: DataTypes.UUID,
        //   allowNull: true
        // }
    }, { timestamps: true });

    StockBatch.associate = (models) => {
        StockBatch.hasMany(models.Stock, {
            foreignKey: 'stockBatchId',
            //   as: 'stockEntries' // Alias to access associated stocks
        });
    };

    return StockBatch;
};
```


```
module.exports = (sequelize, DataTypes) => {
    const Stock = sequelize.define("Stock", {
        id: { type: DataTypes.UUID, defaultValue: DataTypes.UUIDV4, primaryKey: true },
        metricId: { type: DataTypes.UUID, allowNull: false },
        stockEvent: { type: DataTypes.ENUM("stock_in", "stock_out"), allowNull: false },
        initialAmount: { type: DataTypes.FLOAT, allowNull: true },
        amount: { type: DataTypes.FLOAT, allowNull: false },
        updateAmount: { type: DataTypes.FLOAT, allowNull: true },
        totalPrice: { type: DataTypes.FLOAT, allowNull: false },
        salesmanPrice: { type: DataTypes.FLOAT, allowNull: false },
        subAgentPrice: { type: DataTypes.FLOAT, allowNull: false },
        agentPrice: { type: DataTypes.FLOAT, allowNull: false },
        totalNetPrice: { type: DataTypes.FLOAT, allowNull: false },
        totalDistributorShare: { type: DataTypes.FLOAT, allowNull: false },
        totalSalesShare: { type: DataTypes.FLOAT, allowNull: true },
        totalSubAgentShare: { type: DataTypes.FLOAT, allowNull: true },
        totalAgentShare: { type: DataTypes.FLOAT, allowNull: true },
        totalShopShare: { type: DataTypes.FLOAT, allowNull: true },
        createdBy: { type: DataTypes.STRING, allowNull: false },
        canceledBy: { type: DataTypes.STRING, allowNull: true },
        removedBy: { type: DataTypes.STRING, allowNull: true },
        settledBy: { type: DataTypes.STRING, allowNull: true },
        salesId: { type: DataTypes.UUID, allowNull: true },
        subAgentId: { type: DataTypes.UUID, allowNull: true },
        agentId: { type: DataTypes.UUID, allowNull: true },
        shopId: { type: DataTypes.UUID, allowNull: true },
        // --- Add this Foreign Key field ---
        stockBatchId: {
            type: DataTypes.UUID,
            allowNull: true, // Or false if all stocks must belong to a batch
            references: {
                model: 'StockBatches', // Table name defined by StockBatch model
                key: 'id',
            },
            onUpdate: 'CASCADE',
            onDelete: 'SET NULL', // Or RESTRICT / CASCADE
        },
        // --- End of addition ---
        status: { type: DataTypes.ENUM("created", "canceled", "removed", "settled"), allowNull: false },
        description: { type: DataTypes.TEXT, allowNull: true },
    }, { timestamps: true });

    Stock.associate = (models) => {
        Stock.belongsTo(models.Metric, { foreignKey: "metricId" });
        Stock.belongsTo(models.Salesman, { foreignKey: "salesId" });
        Stock.belongsTo(models.SubAgent, { foreignKey: "subAgentId" });
        Stock.belongsTo(models.Agent, { foreignKey: "agentId" });
        Stock.belongsTo(models.Shop, { foreignKey: "shopId" });
        Stock.hasOne(models.SalesmanCommission, {
            foreignKey: 'stockId'// Singular name for one-to-one
        });
        Stock.hasOne(models.ShopAllCommission, {
            foreignKey: 'stockId'// Singular name for one-to-one
        });
        // --- Add association to StockBatch ---
        Stock.belongsTo(models.StockBatch, {
            foreignKey: 'stockBatchId'
        });
        // --- End of addition ---
    };

    return Stock;
};
```


```
module.exports = (sequelize, DataTypes) => {
    const SalesmanCommission = sequelize.define("SalesmanCommission", {
        id: { type: DataTypes.UUID, defaultValue: DataTypes.UUIDV4, primaryKey: true },
        stockId: { type: DataTypes.UUID, allowNull: false },
        salesId: { type: DataTypes.UUID, allowNull: false },
        percentage: { type: DataTypes.FLOAT, allowNull: false },
        totalNetPrice: { type: DataTypes.FLOAT, allowNull: false },
        amount: { type: DataTypes.FLOAT, allowNull: false },
        createdBy: { type: DataTypes.STRING, allowNull: false }
    }, { timestamps: true });

    SalesmanCommission.associate = (models) => {
        SalesmanCommission.belongsTo(models.Stock, { foreignKey: "stockId" });
        SalesmanCommission.belongsTo(models.Salesman, { foreignKey: "salesId" });
    };

    return SalesmanCommission;
};
```